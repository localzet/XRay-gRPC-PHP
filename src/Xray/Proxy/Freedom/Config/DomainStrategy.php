<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proxy/freedom/config.proto

namespace Xray\Proxy\Freedom\Config;

use UnexpectedValueException;

/**
 * Protobuf type <code>xray.proxy.freedom.Config.DomainStrategy</code>
 */
class DomainStrategy
{
    /**
     * Generated from protobuf enum <code>AS_IS = 0;</code>
     */
    const AS_IS = 0;
    /**
     * Generated from protobuf enum <code>USE_IP = 1;</code>
     */
    const USE_IP = 1;
    /**
     * Generated from protobuf enum <code>USE_IP4 = 2;</code>
     */
    const USE_IP4 = 2;
    /**
     * Generated from protobuf enum <code>USE_IP6 = 3;</code>
     */
    const USE_IP6 = 3;
    /**
     * Generated from protobuf enum <code>USE_IP46 = 4;</code>
     */
    const USE_IP46 = 4;
    /**
     * Generated from protobuf enum <code>USE_IP64 = 5;</code>
     */
    const USE_IP64 = 5;
    /**
     * Generated from protobuf enum <code>FORCE_IP = 6;</code>
     */
    const FORCE_IP = 6;
    /**
     * Generated from protobuf enum <code>FORCE_IP4 = 7;</code>
     */
    const FORCE_IP4 = 7;
    /**
     * Generated from protobuf enum <code>FORCE_IP6 = 8;</code>
     */
    const FORCE_IP6 = 8;
    /**
     * Generated from protobuf enum <code>FORCE_IP46 = 9;</code>
     */
    const FORCE_IP46 = 9;
    /**
     * Generated from protobuf enum <code>FORCE_IP64 = 10;</code>
     */
    const FORCE_IP64 = 10;

    private static $valueToName = [
        self::AS_IS => 'AS_IS',
        self::USE_IP => 'USE_IP',
        self::USE_IP4 => 'USE_IP4',
        self::USE_IP6 => 'USE_IP6',
        self::USE_IP46 => 'USE_IP46',
        self::USE_IP64 => 'USE_IP64',
        self::FORCE_IP => 'FORCE_IP',
        self::FORCE_IP4 => 'FORCE_IP4',
        self::FORCE_IP6 => 'FORCE_IP6',
        self::FORCE_IP46 => 'FORCE_IP46',
        self::FORCE_IP64 => 'FORCE_IP64',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(DomainStrategy::class, \Xray\Proxy\Freedom\Config_DomainStrategy::class);

