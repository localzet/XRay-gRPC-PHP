<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: app/proxyman/config.proto

namespace Xray\App\Proxyman;

use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\Internal\Message;
use GPBMetadata\App\Proxyman\Config;
use Xray\Common\Net\IPOrDomain;
use Xray\Common\Net\PortList;
use Xray\Transport\Internet\StreamConfig;

/**
 * Generated from protobuf message <code>xray.app.proxyman.ReceiverConfig</code>
 */
class ReceiverConfig extends Message
{
    /**
     * PortList specifies the ports which the Receiver should listen on.
     *
     * Generated from protobuf field <code>.xray.common.net.PortList port_list = 1;</code>
     */
    protected $port_list = null;
    /**
     * Listen specifies the IP address that the Receiver should listen on.
     *
     * Generated from protobuf field <code>.xray.common.net.IPOrDomain listen = 2;</code>
     */
    protected $listen = null;
    /**
     * Generated from protobuf field <code>.xray.app.proxyman.AllocationStrategy allocation_strategy = 3;</code>
     */
    protected $allocation_strategy = null;
    /**
     * Generated from protobuf field <code>.xray.transport.internet.StreamConfig stream_settings = 4;</code>
     */
    protected $stream_settings = null;
    /**
     * Generated from protobuf field <code>bool receive_original_destination = 5;</code>
     */
    protected $receive_original_destination = false;
    /**
     * Generated from protobuf field <code>.xray.app.proxyman.SniffingConfig sniffing_settings = 7;</code>
     */
    protected $sniffing_settings = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     * @type PortList $port_list
     *           PortList specifies the ports which the Receiver should listen on.
     * @type IPOrDomain $listen
     *           Listen specifies the IP address that the Receiver should listen on.
     * @type AllocationStrategy $allocation_strategy
     * @type StreamConfig $stream_settings
     * @type bool $receive_original_destination
     * @type SniffingConfig $sniffing_settings
     * }
     */
    public function __construct($data = NULL)
    {
        Config::initOnce();
        parent::__construct($data);
    }

    /**
     * PortList specifies the ports which the Receiver should listen on.
     *
     * Generated from protobuf field <code>.xray.common.net.PortList port_list = 1;</code>
     * @return PortList|null
     */
    public function getPortList()
    {
        return $this->port_list;
    }

    public function hasPortList()
    {
        return isset($this->port_list);
    }

    public function clearPortList()
    {
        unset($this->port_list);
    }

    /**
     * PortList specifies the ports which the Receiver should listen on.
     *
     * Generated from protobuf field <code>.xray.common.net.PortList port_list = 1;</code>
     * @param PortList $var
     * @return $this
     */
    public function setPortList($var)
    {
        GPBUtil::checkMessage($var, PortList::class);
        $this->port_list = $var;

        return $this;
    }

    /**
     * Listen specifies the IP address that the Receiver should listen on.
     *
     * Generated from protobuf field <code>.xray.common.net.IPOrDomain listen = 2;</code>
     * @return IPOrDomain|null
     */
    public function getListen()
    {
        return $this->listen;
    }

    public function hasListen()
    {
        return isset($this->listen);
    }

    public function clearListen()
    {
        unset($this->listen);
    }

    /**
     * Listen specifies the IP address that the Receiver should listen on.
     *
     * Generated from protobuf field <code>.xray.common.net.IPOrDomain listen = 2;</code>
     * @param IPOrDomain $var
     * @return $this
     */
    public function setListen($var)
    {
        GPBUtil::checkMessage($var, IPOrDomain::class);
        $this->listen = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.xray.app.proxyman.AllocationStrategy allocation_strategy = 3;</code>
     * @return AllocationStrategy|null
     */
    public function getAllocationStrategy()
    {
        return $this->allocation_strategy;
    }

    public function hasAllocationStrategy()
    {
        return isset($this->allocation_strategy);
    }

    public function clearAllocationStrategy()
    {
        unset($this->allocation_strategy);
    }

    /**
     * Generated from protobuf field <code>.xray.app.proxyman.AllocationStrategy allocation_strategy = 3;</code>
     * @param AllocationStrategy $var
     * @return $this
     */
    public function setAllocationStrategy($var)
    {
        GPBUtil::checkMessage($var, AllocationStrategy::class);
        $this->allocation_strategy = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.xray.transport.internet.StreamConfig stream_settings = 4;</code>
     * @return StreamConfig|null
     */
    public function getStreamSettings()
    {
        return $this->stream_settings;
    }

    public function hasStreamSettings()
    {
        return isset($this->stream_settings);
    }

    public function clearStreamSettings()
    {
        unset($this->stream_settings);
    }

    /**
     * Generated from protobuf field <code>.xray.transport.internet.StreamConfig stream_settings = 4;</code>
     * @param StreamConfig $var
     * @return $this
     */
    public function setStreamSettings($var)
    {
        GPBUtil::checkMessage($var, StreamConfig::class);
        $this->stream_settings = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>bool receive_original_destination = 5;</code>
     * @return bool
     */
    public function getReceiveOriginalDestination()
    {
        return $this->receive_original_destination;
    }

    /**
     * Generated from protobuf field <code>bool receive_original_destination = 5;</code>
     * @param bool $var
     * @return $this
     */
    public function setReceiveOriginalDestination($var)
    {
        GPBUtil::checkBool($var);
        $this->receive_original_destination = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.xray.app.proxyman.SniffingConfig sniffing_settings = 7;</code>
     * @return SniffingConfig|null
     */
    public function getSniffingSettings()
    {
        return $this->sniffing_settings;
    }

    public function hasSniffingSettings()
    {
        return isset($this->sniffing_settings);
    }

    public function clearSniffingSettings()
    {
        unset($this->sniffing_settings);
    }

    /**
     * Generated from protobuf field <code>.xray.app.proxyman.SniffingConfig sniffing_settings = 7;</code>
     * @param SniffingConfig $var
     * @return $this
     */
    public function setSniffingSettings($var)
    {
        GPBUtil::checkMessage($var, SniffingConfig::class);
        $this->sniffing_settings = $var;

        return $this;
    }

}

