<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: app/router/config.proto

namespace Xray\App\Router\Config;

use UnexpectedValueException;
use Xray\App\Router\Config_DomainStrategy;

/**
 * Protobuf type <code>xray.app.router.Config.DomainStrategy</code>
 */
class DomainStrategy
{
    /**
     * Use domain as is.
     *
     * Generated from protobuf enum <code>AsIs = 0;</code>
     */
    const AsIs = 0;
    /**
     * Always resolve IP for domains.
     *
     * Generated from protobuf enum <code>UseIp = 1;</code>
     */
    const UseIp = 1;
    /**
     * Resolve to IP if the domain doesn't match any rules.
     *
     * Generated from protobuf enum <code>IpIfNonMatch = 2;</code>
     */
    const IpIfNonMatch = 2;
    /**
     * Resolve to IP if any rule requires IP matching.
     *
     * Generated from protobuf enum <code>IpOnDemand = 3;</code>
     */
    const IpOnDemand = 3;

    private static $valueToName = [
        self::AsIs => 'AsIs',
        self::UseIp => 'UseIp',
        self::IpIfNonMatch => 'IpIfNonMatch',
        self::IpOnDemand => 'IpOnDemand',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(DomainStrategy::class, Config_DomainStrategy::class);

