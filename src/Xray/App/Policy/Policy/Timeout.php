<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: app/policy/config.proto

namespace Xray\App\Policy\Policy;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Timeout is a message for timeout settings in various stages, in seconds.
 *
 * Generated from protobuf message <code>xray.app.policy.Policy.Timeout</code>
 */
class Timeout extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>.xray.app.policy.Second handshake = 1;</code>
     */
    protected $handshake = null;
    /**
     * Generated from protobuf field <code>.xray.app.policy.Second connection_idle = 2;</code>
     */
    protected $connection_idle = null;
    /**
     * Generated from protobuf field <code>.xray.app.policy.Second uplink_only = 3;</code>
     */
    protected $uplink_only = null;
    /**
     * Generated from protobuf field <code>.xray.app.policy.Second downlink_only = 4;</code>
     */
    protected $downlink_only = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Xray\App\Policy\Second $handshake
     *     @type \Xray\App\Policy\Second $connection_idle
     *     @type \Xray\App\Policy\Second $uplink_only
     *     @type \Xray\App\Policy\Second $downlink_only
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\App\Policy\Config::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.xray.app.policy.Second handshake = 1;</code>
     * @return \Xray\App\Policy\Second|null
     */
    public function getHandshake()
    {
        return $this->handshake;
    }

    public function hasHandshake()
    {
        return isset($this->handshake);
    }

    public function clearHandshake()
    {
        unset($this->handshake);
    }

    /**
     * Generated from protobuf field <code>.xray.app.policy.Second handshake = 1;</code>
     * @param \Xray\App\Policy\Second $var
     * @return $this
     */
    public function setHandshake($var)
    {
        GPBUtil::checkMessage($var, \Xray\App\Policy\Second::class);
        $this->handshake = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.xray.app.policy.Second connection_idle = 2;</code>
     * @return \Xray\App\Policy\Second|null
     */
    public function getConnectionIdle()
    {
        return $this->connection_idle;
    }

    public function hasConnectionIdle()
    {
        return isset($this->connection_idle);
    }

    public function clearConnectionIdle()
    {
        unset($this->connection_idle);
    }

    /**
     * Generated from protobuf field <code>.xray.app.policy.Second connection_idle = 2;</code>
     * @param \Xray\App\Policy\Second $var
     * @return $this
     */
    public function setConnectionIdle($var)
    {
        GPBUtil::checkMessage($var, \Xray\App\Policy\Second::class);
        $this->connection_idle = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.xray.app.policy.Second uplink_only = 3;</code>
     * @return \Xray\App\Policy\Second|null
     */
    public function getUplinkOnly()
    {
        return $this->uplink_only;
    }

    public function hasUplinkOnly()
    {
        return isset($this->uplink_only);
    }

    public function clearUplinkOnly()
    {
        unset($this->uplink_only);
    }

    /**
     * Generated from protobuf field <code>.xray.app.policy.Second uplink_only = 3;</code>
     * @param \Xray\App\Policy\Second $var
     * @return $this
     */
    public function setUplinkOnly($var)
    {
        GPBUtil::checkMessage($var, \Xray\App\Policy\Second::class);
        $this->uplink_only = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.xray.app.policy.Second downlink_only = 4;</code>
     * @return \Xray\App\Policy\Second|null
     */
    public function getDownlinkOnly()
    {
        return $this->downlink_only;
    }

    public function hasDownlinkOnly()
    {
        return isset($this->downlink_only);
    }

    public function clearDownlinkOnly()
    {
        unset($this->downlink_only);
    }

    /**
     * Generated from protobuf field <code>.xray.app.policy.Second downlink_only = 4;</code>
     * @param \Xray\App\Policy\Second $var
     * @return $this
     */
    public function setDownlinkOnly($var)
    {
        GPBUtil::checkMessage($var, \Xray\App\Policy\Second::class);
        $this->downlink_only = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Timeout::class, \Xray\App\Policy\Policy_Timeout::class);

